{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Python Lists and Tuples","provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyP7T0mlKORi8Wr9BK9kpiA4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"71f4eAaHXJ44"},"source":["#Lists\n","\n","Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.\n"]},{"cell_type":"markdown","metadata":{"id":"Dfl8_uiHf0zl"},"source":["\n","##creating a list \n","\n","To create a list, write all the items inside square brackets separated by commas\n","\n","\n","```\n","list=[item1,item2,item3]\n","```\n","\n","**Example**\n","lets create a list of numbers 1 to 5"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-1QZSGR5WfCi","executionInfo":{"status":"ok","timestamp":1626343016532,"user_tz":-330,"elapsed":1836,"user":{"displayName":"Vibhav Kharangate","photoUrl":"","userId":"06933710891066087952"}},"outputId":"fc742a56-d373-4e1c-e42d-95b6957cfbc1"},"source":["nums=[1,2,3,4,5]\n","print(nums)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["[1, 2, 3, 4, 5]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mmknQL1RdOn_"},"source":["##properties of lists\n","\n","* Lists are ordered: This means just likein strings, we can access individual elements of the list using the index.\n","\n","* lists are mutable: This means once we create a list, we can change it any time we want. We can replace certain elements in the list or we can even add or delete elements in the list\n","\n","* lists are not homogenous: This means that not all the elements in the list have to be of the same type. For example, We can have a list in which some elements are numbers and some are strings\n","\n","* lists can have duplicates: lists allows you to have more than one element in it with the same value\n"]},{"cell_type":"markdown","metadata":{"id":"ySpS-USRf3U7"},"source":["##accessing a list\n","\n","accessing a list is similar to how we accessed the letters in strings\n","\n","To access an element in a list we have to write the name of the list followed by the index number inside square brackets\n","\n","Remember that index numbers start from 0\n","\n","**example**\n","\n","lets try to access the 3rd element(index=2) from the previous list of numbers"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OSjN0BQ-g0HZ","executionInfo":{"status":"ok","timestamp":1626343021589,"user_tz":-330,"elapsed":6,"user":{"displayName":"Vibhav Kharangate","photoUrl":"","userId":"06933710891066087952"}},"outputId":"01997f80-375d-4d5c-d460-cd1ff73ab19a"},"source":["print(nums[2])"],"execution_count":7,"outputs":[{"output_type":"stream","text":["3\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9NhLzU7Uity9"},"source":["we can also access elements using negative indexes. Negative indexes start from -1 and travese from right to left.\n","\n","**example**\n","lets access the 2nd last number in the number list"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MiAucuoTjRKh","executionInfo":{"status":"ok","timestamp":1626343000551,"user_tz":-330,"elapsed":15,"user":{"displayName":"Vibhav Kharangate","photoUrl":"","userId":"06933710891066087952"}},"outputId":"51c2d477-827e-4c80-f618-b2dac2aa3438"},"source":["print(nums[-2])"],"execution_count":4,"outputs":[{"output_type":"stream","text":["4\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"SJjUtnY6jUmY"},"source":["We can also access a range of elements in a list\n","\n","**Example**\n","lets access the elements from 2nd to 4th"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JdFZbS3hj2a7","executionInfo":{"status":"ok","timestamp":1626343028032,"user_tz":-330,"elapsed":690,"user":{"displayName":"Vibhav Kharangate","photoUrl":"","userId":"06933710891066087952"}},"outputId":"76ee3420-60ae-42a3-a2b5-dbaee307434e"},"source":["print(nums[2:5])            #remember that the 2nd element is not included, hence we use one greater than the required number"],"execution_count":8,"outputs":[{"output_type":"stream","text":["[3, 4, 5]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"GzwN3t4DlN2O"},"source":["##changing an element in the list\n","\n","To change an element, simply access the element using the index number and equate it to the new value\n","\n","**Example**\n","\n","In the above example, lets change the 3rd element to 5"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U9mxdg_sl5eZ","executionInfo":{"status":"ok","timestamp":1626343039676,"user_tz":-330,"elapsed":710,"user":{"displayName":"Vibhav Kharangate","photoUrl":"","userId":"06933710891066087952"}},"outputId":"c46c642b-2f87-4948-f057-4ad106bc967a"},"source":["print(nums)\n","nums[2] = 5\n","print(nums)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["[1, 2, 3, 4, 5]\n","[1, 2, 5, 4, 5]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_G1pwbmwmkkU"},"source":["## list methods\n","\n","we have a lot of built in methods in lists to do many regular tasks, such as\n","\n","* insert(index, value): used to insert the value at a particular index\n","\n","* append(value): used to add a single item at the end of the list\n","\n","* extend(list): used to add multiple items at the end of the list. Note that these multiple items have to be passed as a list inside the parenthesis\n","\n","* remove(item): used to remove a specific item(not index) from the list\n","\n","* pop(index): removes the item at the specified index no. If no index is specified, then the last item is removed\n","\n","**Example**\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wYaGx6k6p89k","executionInfo":{"status":"ok","timestamp":1626344470040,"user_tz":-330,"elapsed":597,"user":{"displayName":"Vibhav Kharangate","photoUrl":"","userId":"06933710891066087952"}},"outputId":"fdf7c13f-44c9-4153-fb14-a9ba54875f0a"},"source":["cities=['delhi','bangalore', 'kolkata','chennai','mumbai']\n","print(cities)\n","\n","cities.insert(3,'lucknow')\n","print(cities)\n","\n","cities.append('surat')\n","print(cities)\n","\n","cities.extend(['pune','gurgaon','patna'])\n","print(cities)\n","\n","cities.remove('bangalore')\n","print(cities)\n","\n","cities.pop(5)\n","print(cities)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["['delhi', 'bangalore', 'kolkata', 'chennai', 'mumbai']\n","['delhi', 'bangalore', 'kolkata', 'lucknow', 'chennai', 'mumbai']\n","['delhi', 'bangalore', 'kolkata', 'lucknow', 'chennai', 'mumbai', 'surat']\n","['delhi', 'bangalore', 'kolkata', 'lucknow', 'chennai', 'mumbai', 'surat', 'pune', 'gurgaon', 'patna']\n","['delhi', 'kolkata', 'lucknow', 'chennai', 'mumbai', 'surat', 'pune', 'gurgaon', 'patna']\n","['delhi', 'kolkata', 'lucknow', 'chennai', 'mumbai', 'pune', 'gurgaon', 'patna']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"R051wbTXx-ry"},"source":["#Tuples"]},{"cell_type":"markdown","metadata":{"id":"NaR-PQO_yCvi"},"source":["##creating a tuple\n","\n","\n","To create a tuple, write all the items inside parenthesis separated by commas\n","\n","\n","```\n","tuple=(item1,item2,item3)\n","```\n","\n","**Example**\n","lets create a tupple of numbers 1 to 5"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6y606euFzeJH","executionInfo":{"status":"ok","timestamp":1626346497646,"user_tz":-330,"elapsed":432,"user":{"displayName":"Vibhav Kharangate","photoUrl":"","userId":"06933710891066087952"}},"outputId":"098d5c33-0278-42a1-aff7-22dd8152e828"},"source":["nums=(1,2,3,4,5)\n","print(nums)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["(1, 2, 3, 4, 5)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1YQULRUXyF3P"},"source":["##properties of tuples\n","\n","* tuples are ordered: This means just like in strings, we can access individual elements of the tuple using the index.\n","\n","* tuples are immutable: This means once we create a tuple, we cannot change it.\n","\n","* tuples are not homogenous: This means that not all the elements in the tuple have to be of the same type. For example, We can have a tuple in which some elements are numbers and some are strings\n","\n","* tuples can have duplicates: tuples allows you to have more than one element in it with the same value\n"]},{"cell_type":"markdown","metadata":{"id":"H6VVOoFeyLYA"},"source":["##accessing a tupple\n","\n","accessing a tuple is similar to how we accessed the letters in strings\n","\n","To access an element in a tuple we have to write the name of the tuple followed by the index number inside square brackets\n","\n","Remember that index numbers start from 0\n","\n","**example**\n","\n","lets try to access the 3rd element(index=2) from the previous tuple of numbers"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_i5IE7za0XKo","executionInfo":{"status":"ok","timestamp":1626346729751,"user_tz":-330,"elapsed":14,"user":{"displayName":"Vibhav Kharangate","photoUrl":"","userId":"06933710891066087952"}},"outputId":"db09aaf6-8180-4e2b-fae1-63ca212448b2"},"source":["print(nums[2])"],"execution_count":12,"outputs":[{"output_type":"stream","text":["3\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"SXXFO5IL1w3d"},"source":["#Do it yourself\n","\n","* create a list of 5 fruits\n","* print the 4th fruit from the list\n","* replace the 4th fruit with 'pineapple'\n","* remove the 5th fruit"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MpZ28ULf5cBE","executionInfo":{"status":"ok","timestamp":1626348153866,"user_tz":-330,"elapsed":422,"user":{"displayName":"Vibhav Kharangate","photoUrl":"","userId":"06933710891066087952"}},"outputId":"5d2c957d-af64-40ea-9aae-41289ba4fb1a"},"source":["fruits=['mango','papaya','watermelon','apple','chickoo']\n","\n","print(fruits[3])\n","\n","fruits[3]='pineapple'\n","\n","fruits.pop(4)\n","print(fruits)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["apple\n","['mango', 'papaya', 'watermelon', 'pineapple']\n"],"name":"stdout"}]}]}