# -*- coding: utf-8 -*-
"""07 Python Lists and Tuples

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10dOBqcN97Ig1UJ-H8TSjiCevY2XjX2yS

#Lists

Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.

##creating a list 

To create a list, write all the items inside square brackets separated by commas


```
list=[item1,item2,item3]
```

**Example**
lets create a list of numbers 1 to 5
"""

nums=[1,2,3,4,5]
print(nums)

"""##properties of lists

* Lists are ordered: This means just likein strings, we can access individual elements of the list using the index.

* lists are mutable: This means once we create a list, we can change it any time we want. We can replace certain elements in the list or we can even add or delete elements in the list

* lists are not homogenous: This means that not all the elements in the list have to be of the same type. For example, We can have a list in which some elements are numbers and some are strings

* lists can have duplicates: lists allows you to have more than one element in it with the same value

##accessing a list

accessing a list is similar to how we accessed the letters in strings

To access an element in a list we have to write the name of the list followed by the index number inside square brackets

Remember that index numbers start from 0

**example**

lets try to access the 3rd element(index=2) from the previous list of numbers
"""

print(nums[2])

"""we can also access elements using negative indexes. Negative indexes start from -1 and travese from right to left.

**example**
lets access the 2nd last number in the number list
"""

print(nums[-2])

"""We can also access a range of elements in a list

**Example**
lets access the elements from 2nd to 4th
"""

print(nums[2:5])            #remember that the 2nd element is not included, hence we use one greater than the required number

"""##changing an element in the list

To change an element, simply access the element using the index number and equate it to the new value

**Example**

In the above example, lets change the 3rd element to 5
"""

print(nums)
nums[2] = 5
print(nums)

"""## list methods

we have a lot of built in methods in lists to do many regular tasks, such as

* insert(index, value): used to insert the value at a particular index

* append(value): used to add a single item at the end of the list

* extend(list): used to add multiple items at the end of the list. Note that these multiple items have to be passed as a list inside the parenthesis

* remove(item): used to remove a specific item(not index) from the list

* pop(index): removes the item at the specified index no. If no index is specified, then the last item is removed

**Example**

"""

cities=['delhi','bangalore', 'kolkata','chennai','mumbai']
print(cities)

cities.insert(3,'lucknow')
print(cities)

cities.append('surat')
print(cities)

cities.extend(['pune','gurgaon','patna'])
print(cities)

cities.remove('bangalore')
print(cities)

cities.pop(5)
print(cities)

"""#Tuples

##creating a tuple


To create a tuple, write all the items inside parenthesis separated by commas


```
tuple=(item1,item2,item3)
```

**Example**
lets create a tupple of numbers 1 to 5
"""

nums=(1,2,3,4,5)
print(nums)

"""##properties of tuples

* tuples are ordered: This means just like in strings, we can access individual elements of the tuple using the index.

* tuples are immutable: This means once we create a tuple, we cannot change it.

* tuples are not homogenous: This means that not all the elements in the tuple have to be of the same type. For example, We can have a tuple in which some elements are numbers and some are strings

* tuples can have duplicates: tuples allows you to have more than one element in it with the same value

##accessing a tupple

accessing a tuple is similar to how we accessed the letters in strings

To access an element in a tuple we have to write the name of the tuple followed by the index number inside square brackets

Remember that index numbers start from 0

**example**

lets try to access the 3rd element(index=2) from the previous tuple of numbers
"""

print(nums[2])

"""#Do it yourself

* create a list of 5 fruits
* print the 4th fruit from the list
* replace the 4th fruit with 'pineapple'
* remove the 5th fruit
"""

fruits=['mango','papaya','watermelon','apple','chickoo']

print(fruits[3])

fruits[3]='pineapple'

fruits.pop(4)
print(fruits)