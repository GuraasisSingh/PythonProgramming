# -*- coding: utf-8 -*-
"""02 Python Operations

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hzjsJCIlhBqImYmQhcRD2BakmaZcKGIB

#Operators

Python divides the operators in the following groups:

* Arithmetic operators
* Assignment operators
* Comparison operators
* Logical operators
* Identity operators
* Membership operators
* Bitwise operators

**In this section we will only look at examples of arithmatic operations. We will cover the other operations when we cover the topic of conditionals**

##Arithmatic Operators

Python allows us to do all sort of arithmatic operations on numbers. You can do operations on numbers directly, example:
```
a = 5+4
```
or, operations on variables containing numbers

```
a = 5
b = 6
c = a+b
```

##Addition of 2 numbers

you can add 2 numbers by using a '+' sign between the 2 numbers that you want to add.

```
add = num1 + num2
```
**Example**
"""

a=100
b=3

add = a + b

print(add)

"""##Subtraction of 2 numbers

you can subtract 2 numbers by using a '-' sign between the 2 numbers that you want to subtract.

```
sub = num1 - num2
```
**Example**
"""

sub = a-b
print(sub)

"""##Multiplication of 2 numbers

you can multiply 2 numbers by using a '*' sign between the 2 numbers that you want to multiply.

```
mul = num1 * num2
```
**Example**
"""

mul = a*b

print(mul)

"""##Division of 2 numbers

you can divide 2 numbers by using a '/' sign between the 2 numbers that you want to divide.

```
div = num1 / num2
```
**Example**
"""

div= a/b
print(div)

"""##Modulus of 2 numbers

modulus is the remainder you get when you divide 2 numbers.

You can find the modulus of 2 numbers by using a '%' sign between the 2 numbers.

```
mod = num1 % num2
```
**Example**
"""

mod = a%b

print(mod)

"""##Floor division of 2 numbers

Floor division gives us the quotient of the division between 2 numbers. You can floor divide 2 numbers by using a '//' sign between the 2 numbers.

```
quotient = num1//num2
```
**Example**
"""

quotient= a//b

print(quotient)

"""##Exponentiation of 2 numbers

you can do x raised to the power y in python by using a '**' sign between the 2 numbers.

```
exp = num1 ** num2
```
**Example**
"""

exp= a**b

print(exp)

"""**Note**

When you have multiple operations, python operates using the standard PODMAS / BODMAS rule

##Python Assignment Operators

Assignment operators are used to assign values to variables:
```
Operator	      Example	         Same As
=	              x = 5	         x = 5	
+=	             x += 3	        x = x + 3	
-=	             x -= 3	        x = x - 3	
*=	             x *= 3	        x = x * 3	
/=	             x /= 3	        x = x / 3	
%=	             x %= 3	        x = x % 3	
//=	            x //= 3	       x = x // 3	
**=	            x **= 3	       x = x ** 3	
&=	             x &= 3	        x = x & 3	
|=	             x |= 3	        x = x | 3	
^=	             x ^= 3	        x = x ^ 3	
>>=	            x >>= 3	       x = x >> 3	
<<=	            x <<= 3	       x = x << 3	
```
##Python Comparison Operators
Comparison operators are used to compare two values:
```
Operator	       Name	              Example
==	             Equal	             x == y	
!=	           Not equal	           x != y	
>	          Greater than	          x > y	
<	            Less than	           x < y	
>=	       Greater than or equal to	x >= y	
<=	       Less than or equal to	   x <= y	
```
##Python Logical Operators
Logical operators are used to combine conditional statements:
```
Operator	           Description	                                       Example	
and       	Returns True if both statements are true	                x < 5 and  x < 10	
or	        Returns True if one of the statements is true	           x < 5 or x < 4	
not	       Reverse the result, returns False if the result is true	 not(x < 5 and x < 10)	
```
##Python Identity Operators
Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:
```
Operator	            Description	                             Example	
is 	   Returns True if both variables are the same object	    x is y	
is not	Returns True if both variables are not the same object	x is not y	
```
##Python Membership Operators
Membership operators are used to test if a sequence is presented in an object:
```
Operator	         Description	                                                                       Example	
in 	        Returns True if a sequence with the specified value is present in the object	             x in y	
not in	     Returns True if a sequence with the specified value is not present in the object	         x not in y	
```
##Python Bitwise Operators
Bitwise operators are used to compare (binary) numbers:
```
Operator   	Name	                   Description
& 	        AND	                     Sets each bit to 1 if both bits are 1
|	          OR	                     Sets each bit to 1 if one of two bits is 1
 ^	        XOR	                     Sets each bit to 1 if only one of two bits is 1
~ 	        NOT	                     Inverts all the bits
<<	        Zero fill left shift	    Shift left by pushing zeros in from the right and let the leftmost bits fall off
>>	        Signed right shift	      Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off
```

**Try it yourself**

Do the following tasks :


*   Create 2 variables num1 and num2.
*   Assign them values of 200 and 50 respectively
* Find the result of num2(num1//num2)-5

**Solution**
"""

num1 = 200
num2= 50

result= num2*(num1//num2)-5

print(result)